generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
model Category {
  id       Int       @id @default(autoincrement()) @map("id")
  title    String    @map("title")
  products Product[]
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @default(now()) @updatedAt @map("updated_at")
  @@map("category")
}

model Product {
  id           Int                @id @default(autoincrement()) @map("id")
  name         String             @map("name")
  slug         String             @unique @map("slug")
  price        Float              @map("price")
  description  String             @map("description")
  starRating   Float              @map("star_rating")
  discountRate Int                @map("discount_rate")
  categoryId   Int                @map("category_id")
  category     Category           @relation(fields: [categoryId], references: [id])
  variants     ProductVariant[]
  productColorImages ProductColorImage[]
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @default(now()) @updatedAt @map("updated_at")
  @@map("product")
}

model ProductVariant {
  id        Int           @id @default(autoincrement()) @map("id")
  size      String        @map("size")
  productId Int           @map("product_id")
  stock     Int           @map("stock")
  colorId   Int           @map("color_id")
  product   Product       @relation(fields: [productId], references: [id])
  color     Color         @relation(fields: [colorId], references: [id])
  cartItems CartItem[]
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @default(now()) @updatedAt @map("updated_at")
  @@unique([productId, size, colorId])
  @@map("product_variant")
}

model Color {
  id                 Int                  @id @default(autoincrement()) @map("id")
  name               String               @map("name")
  productVariants    ProductVariant[]
  productColorImages ProductColorImage[]  
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @default(now()) @updatedAt @map("updated_at")

  @@map("color")
}

model ProductColorImage {
  id        Int     @id @default(autoincrement()) @map("id")
  productId Int     @map("product_id")
  colorId   Int     @map("color_id")
  imagePath String  @map("image_path")
  product   Product @relation(fields: [productId], references: [id])
  color     Color   @relation(fields: [colorId], references: [id])
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @default(now()) @updatedAt @map("updated_at")
  @@unique([productId, colorId, imagePath])
  @@map("product_color_image")
}

model User {
  id        String    @id @default(uuid()) @map("id")
  email     String    @unique @map("email")
  password  String?   @map("password")
  cpf       String    @unique @map("cpf")
  isGuest   Boolean   @default(true) @map("is_guest")
  fullName  String?   @map("full_name")
  birthDate DateTime  @map("birth_date")
  phone     String?   @map("phone")
  addresses Address[]
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @default(now()) @updatedAt @map("updated_at")

  @@map("user")
}

model Address {
  id           String   @id @default(uuid()) @map("id")
  userId       String   @map("user_id")
  user         User     @relation(fields: [userId], references: [id])
  cep          String   @map("cep")
  receiverName String   @map("receiver_name")
  street       String   @map("street")
  number       String   @map("number")
  complement   String?  @map("complement")
  neighborhood String   @map("neighborhood")
  city         String   @map("city")
  state        String   @map("state")
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @default(now()) @updatedAt @map("updated_at")
  carts        Cart[]

  @@map("address")
}

model Cart {
  id           String            @id @default(uuid()) @map("id")
  userId       Int?              @map("user_id")
  addressId    String?           @map("address_id")
  address      Address?          @relation(fields: [addressId], references: [id])
  createdAt    DateTime          @default(now()) @map("created_at")
  updatedAt    DateTime?         @default(now()) @map("updated_at")
  shippingQuote Json?            @map("shipping_quote")
  cartItems    CartItem[]

  @@map("cart")
}

model CartItem {
  id               Int            @id @default(autoincrement()) @map("id")
  quantity         Int            @map("quantity")
  productVariantId Int            @map("product_variant_id")
  cartId           String         @map("cart_id")
  productVariant   ProductVariant @relation(fields: [productVariantId], references: [id])
  cart             Cart           @relation(fields: [cartId], references: [id])
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @default(now()) @updatedAt @map("updated_at")
  @@unique([productVariantId, cartId])
  @@map("cart_item")
}